urls:

users/ -- view / search for users
user/<id>/ -- view users profile + status
- you can update your status/bio from profile too

blog/<id>/ -- view blog posts paginated & button to visit community page
blog/<id>/<slug>/ -- view blog post ( has # id for jumping to in the html)
blog/<id>/search/ -- search for posts in blog via searchbar, or by tag (what if slug is search? will it error?)
blog/<id>/community/ -- view community page (paginated comment wall, and you can pin comments too)
blog/search/ -- search for posts in all blogs via tags

-- moderator controls appear on comments/blogposts/community comments/user profiles
-- these options work if you are admin (delete) or if you are a regular user (all work)

blog/create/ -- create a blog
blog/delete/ -- delete a blog and all its posts (warning shows up)

blog/<id>/rate-blog/ -- upvote/downvote a blog
blog/<id>/create-post/ -- create a post
blog/<id>/edit-post/<slug>/
blog/<id>/update-post/<slug>/ -- should i do /<slug>/update-post, or /update-post/<slug> ?
	-- tags are sent in POST data to update-post
	-- tags can be added/removed even when not on the edit page
blog/<id>/delete-post/<slug>/ -- what if the author changes the slug while the admin presses delete? or if the author changes the slug and then the admin deletes?
blog/<id>/rate-post/<slug>/ -- avoid race condition when 2 users vote at the same time

blog/<id>/create-comment/<slug>/
blog/<id>/delete-comment/<slug>/<comment-id> -- comment id passed if user is admin to delete button form
	-- use transactions? maybe? idk gotta learn more about models
blog/<id>/update-comment/<slug>/<comment-id> -- replaces content with "This content violated the terms of service and was removed." -- just flips the moderated flag in the db


blog/<id>/community/create-comment/
blog/<id>/community/delete-comment/
-- replaces content with "This content violated the terms of service and was removed." -- just flips the moderated flag in the db

----

-- why isn't it all in POST data? <id too>?
moderate/user/<id>/ban/ (reason/length in POST data)
moderate/user/<id>/username/ -- moderate a username (first warning / 3)
moderate/user/<id>/avatar/ -- moderate an avatar (replaces it with blank picture and notifies user of first warning)
moderate/user/<id>/bio/ -- moderate a user bio
moderate/user/<id>/status/ -- moderate a user status (first warning / 3 then temp ban)

moderate/blog/<blog-id>/<post-slug> -- moderate a blog post   -- what if the author changes the slug while the admin presses delete? or if the author changes the slug and then the admin deletes?
moderate/blog/<blog-id>/<post-slug>/<comment-id>

moderate/blog/<blog-id>/community/<community-comment-id>


login/ -- login
register/ -- register
logout/ -- logout

settings/ -- edit email, username, gender, password, delete account
settings/update/username/
settings/update/bio/
settings/update/status/
settings/update/email/
settings/update/password/
settings/update/gender/
settings/update/avatar/ -- can also update from profile
settings/update/theme/ -- update theme




#######################################################

-- all comments show profile picture

-- how to not repeat is_deleted & stuff?
CREATE TABLE author( -- might rename this to 'user' and just display 'author' on the frontend for the user
	author_id GENERATED ALWAYS AS IDENTITY, -- use uuids? dunno if it's better since we might have billions of records
	username TEXT NOT NULL,
	bio TEXT,
	status TEXT DEFAULT ('Status is not set'),
	avatar_url TEXT NOT NULL DEFAULT ('blah.com/placeholderavatar.png'), -- is this the best way to store a link to our cloud img?
	is_writing BOOLEAN NOT NULL DEFAULT (False), -- is author currently writing a post
	is_online BOOLEAN NOT NULL DEFAULT (True), -- user just made their account. so they are online by default
	is_moderator BOOLEAN NOT NULL DEFAULT (False),
	is_light_theme BOOLEAN NOT NULL DEFAULT (True), -- light/dark, default is light theme
	email TEXT NOT NULL, -- let django handle constraint for this
	gender SMALLINT NOT NULL, - 1: Male 2: Female 3: Human
	password ... -- let django handle this

	created_on TIMESTAMPTZ NOT NULL DEFAULT (now()),
	is_deleted BOOLEAN NOT NULL DEFAULT (False),

	PRIMARY KEY (author_id)
);

CREATE TABLE blog(
	blog_id GENERATED ALWAYS AS IDENTTITY -- use uuids? dunno if it's better since we might have billions of records
	title TEXT NOT NULL,
	upvotes BIGINT NOT NULL DEFAULT (0),
	downvotes BIGINT NOT NULL DEFAULT (0),

	created_on TIMESTAMPTZ NOT NULL DEFAULT (now()),
	--is_public BOOLEAN NOT NULL DEFAULT (True), -- public/private -- i would like to make public, and then private invite only blogs but that may be too much for now.
	is_deleted BOOLEAN NOT NULL DEFAULT (False), -- Hides this content from showing. The user deleted it themselves.
	is_moderated BOOLEAN NOT NULL DEFAULT (False), -- "Content moderated blah message

	author_id BIGINT NOT NULL references author(author_id),

	PRIMARY KEY (blog_id)
);

CREATE TABLE blog_tag_mtm(
	blog_tag_id GENERATED ALWAYS AS IDENTITY,

	blog_id BIGINT NOT NULL references blog(blog_id),
	tag_id BIGINT NOT NULL references tag(tag_id),

	PRIMARY KEY (post_comment_id)
);

CREATE TABLE tag(
	tag_id GENERATED ALWAYS AS INDENTITY,
	
	tag_text TEXT NOT NULL UNIQUE,
	
	PRIMARY KEY (tag_id)
);


-- community walls are comments on a blog.
-- you can filter by comments made by the blog author, or upvotes/downvotes, or date.
-- blog author can enable or disable wall, and enable or disable comments on the wall.
-- blog author can remove all comments with a button
CREATE TABLE community_wall(
	wall_id GENERATED ALWAYS AS IDENTITY,
	is_enabled BOOLEAN NOT NULL DEFAULT (True),
	is_comments_enabled BOOLEAN NOT NULL DEFAULT (False),

	author_id references author(author_id),

	PRIMARY KEY (wall_id)
);

-- time will be converted to local timezone via javascript
CREATE TABLE community_comment(
	comment_id GENERATED ALWAYS AS IDENTITY,
	title TEXT NOT NULL, -- in the future I might remove titles, and so default will be NULL to retain old titles for viewing pleasure,
			     -- .. or I might just drop the column idk
	body TEXT NOT NULL,
	upvotes INTEGER NOT NULL DEFAULT (0),
	downvotes INTEGER NOT NULL DEFAULT (0),

	is_pinned BOOLEAN NOT NULL DEFAULT (False),
	pinned_at TIMESTAMPTZ NOT NULL DEFAULT (now()),
	
	is_deleted BOOLEAN NOT NULL DEFAULT (False),  -- Hides this content from showing. The user deleted it themselves.
	created_on TIMESTAMPTZ NOT NULL DEFAULT (now()),
	is_moderated BOOLEAN NOT NULL DEFAULT (False),  -- "Content moderated blah message

	author_id BIGINT NOT NULL references author(author_id), -- commentor is an author user
	wall_id BIGINT NOT NULL references community_wall(wall_id),

	PRIMARY KEY (comment_id)
);


CREATE TABLE post(
	post_id GENERATED ALWAYS AS IDENTITY, -- use uuids? dunno if it's better since we might have billions of records
	cover_image_id references images(image_id),
	title TEXT NOT NULL,
	body TEXT NOT NULL, -- body is stored as parsed rich text (so we can have bold, italics, images)
			    -- how should we implement functionality to delete the image?
	slug TEXT NOT NULL,
	upvotes BIGINT NOT NULL DEFAULT (0),
	downvotes BIGINT NOT NULL DEFAULT (0),
	last_updated TIMESTAMPTZ NOT NULL DEFAULT (now()),
	
	created_on TIMESTAMPTZ NOT NULL DEFAULT (now()),
	is_public BOOLEAN NOT NULL DEFAULT (True), -- public/private user choice
	is_deleted BOOLEAN NOT NULL DEFAULT (False), -- Hides this content from showing. The user deleted it themselves.
	is_moderated BOOLEAN NOT NULL DEFAULT (False), -- "Content moderated blah message"

	blog_id BIGINT NOT NULL references blog(blog_id),
	author_id BIGINT NOT NULL references author(author_id),


	PRIMARY KEY (post_id)
);

-- when a user uploads an image to use in their post, the link for it will be stored here.
-- if a file of the same name exists when they try to upload, it will overwrite the image and notify the user.
CREATE TABLE images(
	image_id GENERATED ALWAYS AS IDENTITY,
	image_url TEXT NOT NULL DEFAULT ('blah.com/placeholder_img.png'),
	-- alt tag for image + used for captions
	title TEXT NOT NULL DEFAULT ('Untitled Image'), -- add constraint to limit characters

	created_on TIMESTAMPTZ NOT NULL DEFAULT (now()),
	is_deleted BOOLEAN NOT NULL DEFAULT (False), -- Hides this content from showing. The user deleted it themselves.
	is_moderated BOOLEAN NOT NULL DEFAULT (False), -- "Content moderated blah message"

	author_id references author(author_id),

	PRIMARY KEY (image_id)
);

CREATE TABLE post_comment(
	comment_id GENERATED ALWAYS AS IDENTITY,
	title TEXT NOT NULL,
	body TEXT NOT NULL,
	upvotes INTEGER NOT NULL DEFAULT (0),
	downvotes INTEGER NOT NULL DEFAULT (0),

	is_deleted BOOLEAN NOT NULL DEFAULT (False), -- Hides this content from showing. The user deleted it themselves.
	created_on TIMESTAMPTZ NOT NULL DEFAULT (now()),
	is_moderated BOOLEAN NOT NULL DEFAULT (False), -- "Content moderated blah message"

	author_id BIGINT NOT NULL references author(author_id), -- commentor is an author user
	post_id BIGINT NOT NULL references post(post_id),

	PRIMARY KEY (comment_id)
);

